@page "/admin/categories"
@layout AdminLayout
@inherits Admin

<PageTitle>Admin Category</PageTitle>

@if (loggedIn)
{
    <RadzenButton Click=@OnClick Text="Add new category" ButtonStyle="ButtonStyle.Primary" Style="width:fit-content;margin-bottom:20px" Icon="add" />
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@categories" TItem="Document" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Document" Property="ObjectId" Sortable="false" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Document" Property="Name" Title="Category name" Filterable="false" Width="160px" Frozen="true" Sortable="false" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="Document" Sortable="false" Filterable="false" Width="80px" Frozen="true">
                <Template Context="data">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Radzen.Variant="Radzen.Variant.Flat" Size="ButtonSize.Medium" Click="@(args => UpdateRow(data))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Radzen.Variant="Radzen.Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(data.ObjectId))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    DocumentList categories;
    string Category = "";
    private bool visible = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        categories = DB.Categories.SelectAll();

        StateHasChanged();
    }

    protected async Task UpdateRow(Document doc)
    {
        Category = doc.Name;
        visible = false;
        StateHasChanged();
        var result = await DialogService.OpenAsync("Simple Dialog", (ds) =>
    @<RadzenStack Gap="1.5rem">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Category name</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: red" Visible="@visible">Category has already existed!</RadzenText>
            <RadzenTextBox @bind-Value=@Category Placeholder="Enter category name" class="w-100" aria-label="Gallery type textbox" />
        </RadzenCard>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" Radzen.AlignItems="Radzen.AlignItems.Center">
            <RadzenButton Text="Save" Click=@(() => SaveCategory(ds, doc)) Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
        );
    }

    protected void DeleteRow(string ID)
    {
        DB.Categories.Delete(ID);
        categories = DB.Categories.SelectAll();

        StateHasChanged();
    }

    protected async Task OnClick()
    {
        visible = false;
        Category = "";
        StateHasChanged();
        var result = await DialogService.OpenAsync("Simple Dialog", (ds) =>
    @<RadzenStack Gap="1.5rem">
        <RadzenCard>
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Category name</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle2" Style="color: red" Visible="@visible">Category has already existed!</RadzenText>
            <RadzenTextBox @bind-Value=@Category Placeholder="Enter category name" class="w-100" aria-label="Gallery type textbox" />
        </RadzenCard>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" Gap="0.5rem" Radzen.AlignItems="Radzen.AlignItems.Center">
            <RadzenButton Text="Save" Click=@(() => SaveCategory(ds)) Style="width: 80px;" />
        </RadzenStack>
    </RadzenStack>
    );
    }

    protected void SaveCategory(Radzen.DialogService ds, Document? doc = null)
    {
        var cat = DB.Categories.Select(x => x.Name == Category).FirstOrDefault();
        bool check = false;

        if (cat == null || (doc != null && cat.ObjectId == doc.ObjectId)) check = true;

        if (check)
        {
            if (doc == null) doc = new Document { ObjectId = Guid.NewGuid().ToString() };
            doc.Name = Category;
            DB.Categories.InsertOrUpdate(doc);

            categories = DB.Categories.SelectAll();
            visible = false;
            StateHasChanged();
            ds.Close(true);
        }
        else
        {
            visible = true;
            ds.Refresh();
            StateHasChanged();
        }
    }
}
